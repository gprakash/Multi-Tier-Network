LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/location.csv' AS line
CREATE (:Location {locationKey:line.locationId + ':' + line.locationType, locationERP:line.locationERP, locationId: line.locationId, locationType: line.locationType, locationDescription: line.locationDescription, locationLatitude:line.locationLatitude, locationLongitude: line.locationLongitude, address: line.Address})

LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/item.csv' AS line
CREATE (:Item {itemKey:line.itemGovSystem + ':' + line.itemNumber +  ':' +  line.itemIndicator +  ':' + line.itemChangeLevel, itemGovSystem: line.itemGovSystem, itemNumber:line.itemNumber, itemIndicator:line.itemIndicator, itemChangeLevel: line.itemChangeLevel, itemDescription: line.itemDescription})

LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/itemLocation.csv' AS line
CREATE (:ItemLocation {itemLocationKey:line.locationId + ':' + line.locationType + ':' + line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel, locationId: line.locationId, locationType: line.locationType, itemLocationDescription: line.itemLocationDescription, itemGovSystem:line.itemGovSystem, itemNumber: line.itemNumber, itemIndicator: line.itemIndicator, itemChangeLevel:line.itemChangeLevel})


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/itemLocation.csv' AS line
match (x:Location {locationKey: line.locationId + ':' + line.locationType})
match (y:Item {itemKey: line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel})
CREATE (x)-[:MAKES]->(y)
return count(*);


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/itemLocation.csv' AS line
match (x:ItemLocation {itemLocationKey: line.locationId + ':' + line.locationType + ':' + line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel})
match (y:Location {locationKey: line.locationId + ':' + line.locationType })
CREATE (x)-[:MADE_AT]->(y)
return count(*);


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/bom.csv' AS line
match (parent:ItemLocation {itemLocationKey: line.parentLocationId + ':' + line.parentLocationType + ':' + line.parentItemGovSystem + ':' + line.parentItemNumber + ':' + line.parentItemIndicator + ':' + line.parentItemChangeLevel})
match (child:ItemLocation {itemLocationKey: line.childLocationId + ':' + line.childLocationType + ':' + line.childItemGovSystem + ':' + line.childItemNumber + ':' + line.childItemIndicator + ':' + line.childItemChangeLevel})
create (parent)-[r:CONTAINS]->(child)
set r.quantity = line.childQuantity, r.suppliersplitpercent = line.childLocationSplitPercent
return count(*);


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/forecasts.csv' AS line
match (productLocation:ItemLocation {itemLocationKey: line.locationId + ':' + line.locationType + ':' + line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel})
set productLocation.forecast = line.annualForecast
return count(*);


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/forecasts.csv' AS line
match p=(productLocation:ItemLocation {itemLocationKey: line.locationId + ':' + line.locationType + ':' + line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel})-[:CONTAINS*]->(y:ItemLocation) where productLocation.itemLocationKey contains ':PLT'
set y.forecast = 0
return reduce (lineage = '', x in nodes(p) | lineage + '->' + x.itemLocationKey) as Lineage, y.itemLocationKey, y.forecast, productLocation.forecast


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/forecasts.csv' AS line
match p=(productLocation:ItemLocation {itemLocationKey: line.locationId + ':' + line.locationType + ':' + line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel})-[:CONTAINS*]->(y:ItemLocation) where productLocation.itemLocationKey contains ':PLT'
with reduce (forecast = toInteger(productLocation.forecast), r in relationships(p) | toInteger(forecast) * toInteger(r.quantity) * toInteger(r.suppliersplitpercent)) as forecast, reduce (forecastStr = productLocation.forecast, r in relationships(p) | forecastStr + ' '+ apoc.convert.toString(apoc.convert.toInteger(r.quantity)) + ' '+ apoc.convert.toString(apoc.convert.toInteger(r.suppliersplitpercent))) as forecastStr, y, p, productLocation
set y.forecast = toInteger(y.forecast) + forecast
return reduce (lineage = '', x in nodes(p) | lineage + '->' + x.itemLocationKey) as Lineage, y.itemLocationKey, y.forecast, forecast, productLocation.forecast, forecastStr


LOAD CSV with headers FROM 'https://raw.githubusercontent.com/gprakash/Multi-Tier-Network/main/forecasts.csv' AS line
match p=(productLocation:ItemLocation {itemLocationKey: line.locationId + ':' + line.locationType + ':' + line.itemGovSystem + ':' + line.itemNumber + ':' + line.itemIndicator + ':' + line.itemChangeLevel})-[:CONTAINS*]->(y:ItemLocation) where productLocation.itemLocationKey contains ':PLT'
with reduce (forecast = toInteger(productLocation.forecast), r in relationships(p) | toInteger(forecast) * toInteger(r.quantity) * toInteger(r.suppliersplitpercent)) as forecast, reduce (forecastStr = productLocation.forecast, r in relationships(p) | forecastStr + ' '+ apoc.convert.toString(apoc.convert.toInteger(r.quantity)) + ' '+ apoc.convert.toString(apoc.convert.toInteger(r.suppliersplitpercent))) as forecastStr, y, p, productLocation
return reduce (lineage = '', x in nodes(p) | lineage + '->' + x.itemLocationKey) as Lineage, y.itemLocationKey, y.forecast, forecast, productLocation.forecast, forecastStr
